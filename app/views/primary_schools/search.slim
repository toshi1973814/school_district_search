h1 小学校区検索

h4
  | 学区を知りたい地点をクリックして「この地点の学区の小学校を検索する」ボタンを押してください。
  | 赤いマーカーが検索地点で、Bのマーカーが学校です。青線がクリック地点から学校までのルートです。また、学区はグレーで表示されています。

= form_tag primary_schools_path, method: :get
  = hidden_field_tag :lat, params[:lat]
  = hidden_field_tag :lng, params[:lng]
  div 
    | クリックした地点:
    span#address
  = button_tag 'この地点の学区の小学校を検索する'

- if @results

  - counter = 0;
  - @results.each do |primary_school|
    article
      - properties = primary_school._source.properties
      h3.school-name data-school-name="#{properties.a27_006}#{properties.a27_007}"
        | #{properties.a27_006}#{properties.a27_007}
        span.school-address data-school-address="#{properties.a27_008}" = " (所在地: #{properties.a27_008})"
      - if 0 == counter
        div
          | クリック地点からの距離:
          span#distance
          | &nbsp;
          | クリック地点からの徒歩時間:
          span#duration

      - counter = counter + 1
  - if @results.count == 0
    p 該当地点のデータは登録されていません

#map

javascript:
  var markers = [];
  var initialized = false;
  var geocoder = new google.maps.Geocoder();

  function getAddress(latLng, map) {
    geocoder.geocode( {'latLng': latLng},
      function(results, status) {
        if(status == google.maps.GeocoderStatus.OK) {
          if(results[0]) {
            $('#address').html(results[0].formatted_address);
          } else {
            $('#address').html("No results");
          }
        }
        else {
          $('#address').html(status);
        }
      }
    );
  }

  var infowindow = new google.maps.InfoWindow({
    content: '<img id="info-window" />'
  });
  var photoUrl = null;

  function placeRequestCallback(results, status) {
    if (status == google.maps.places.PlacesServiceStatus.OK) {
      if(results[0].photos) {
        var max = parseInt($(window).width() * 0.5);
        photoUrl = results[0].photos[0].getUrl({'maxWidth': max, 'maxHeight': max})
      }
    }
  }

  var service = new google.maps.DistanceMatrixService();
  var directionsService = new google.maps.DirectionsService;
  var directionsDisplay = new google.maps.DirectionsRenderer;
  var schoolPosition = null;
  var searchPosition = null;

  function codeAddress(map) {
  
    var address = $('.school-address').first().attr('data-school-address');
    var schoolName = $('.school-name').first().attr('data-school-name');

    if(0 < schoolName.length) {
      var request = {
        query: schoolName
      };
      var placesService = new google.maps.places.PlacesService(map);
      placesService.textSearch(request, placeRequestCallback);
    }
  
    geocoder.geocode( { 'address' : address }, function( results, status ) {
      if( status == google.maps.GeocoderStatus.OK ) {
        schoolPosition = results[0].geometry.location
        var marker = new google.maps.Marker({
          position: schoolPosition,
          map: map,
        });
        marker.addListener('click', function() {
          infowindow.open(map, marker);
          $('#info-window').attr('src', photoUrl);
        });

        service.getDistanceMatrix(
          {
            origins: [searchPosition],
            destinations: [schoolPosition],
            travelMode: 'WALKING',
          }, function(response, status) {
            if (status !== 'OK') {
              alert('Error was: ' + status);
            } else {
              var distance = response.rows[0].elements[0].distance;
              var duration = response.rows[0].elements[0].duration;
              $('#distance').html(distance.text);
              $('#duration').html(duration.text);
              
            }
          });

        directionsService.route({
          origin: searchPosition,
          destination: schoolPosition,
          travelMode: 'WALKING'
        }, function(response, status) {
          if (status === 'OK') {
            directionsDisplay.setDirections(response);
          } else {
            window.alert('Directions request failed due to ' + status);
          }
        });
      } else {
          alert( 'Geocodeは次の理由で失敗しました: ' + status );
      }
    } );
  }

  function addMarker(position, map) {
    searchPosition = position;
    $('#lat').val(position.lat());
    $('#lng').val(position.lng());
    var marker = new google.maps.Marker({
      position: position,
      map: map
    });
    markers.push(marker);
    getAddress(position, map);
    if(0 < $('.school-address').length && false == initialized) {
      codeAddress(map);
    }
  }

  var jsonData = null;
  if(0 < "#{@results}".length) {
    jsonData = {
      "type": "FeatureCollection",
      "features": [
        {
          "type": "Feature",
          "properties": {
            "stroke": "#555555",
            "stroke-width": 2,
            "stroke-opacity": 1
          },
          "geometry": #{(@results.blank?) ? "[]" : raw(@results.first._source.geometry.to_json)}
        }
      ]
    };
  }

  handler = Gmaps.build('Google');
  var window_width = $(window).width() * 0.95;
  $('#map').width(window_width);
  // 画面が横長か縦長かで高さを分岐
  if($(window).width() < $(window).height()) {
    $('#map').height(window_width * 0.8);
  } else {
    $('#map').height(window_width * 0.3);
  }

  handler.buildMap({ provider: {}, internal: {id: 'map'}}, function(){
    var map = handler.getMap();
    map.setCenter(#{raw @hash.first.to_json});
    map.setZoom(15);
    if(null != jsonData) {
      map.data.addGeoJson(jsonData);
      map.data.setStyle({strokeColor: "blue"});
    }
    directionsDisplay.setMap(map);
    google.maps.event.addListener(map, 'bounds_changed', function(object){
      if(false == initialized) {
        addMarker(map.getCenter(), map);
        initialized = true;
      }
    });
    google.maps.event.addListener(map, 'click', function(object){
      for (var i = 0; i < markers.length; i++) {
        markers[i].setMap(null);
      }
      addMarker(object.latLng, map);
    });
    map.data.addListener('click', function(object){
      for (var i = 0; i < markers.length; i++) {
        markers[i].setMap(null);
      }
      addMarker(object.latLng, map);
    });
  });

