h1 小学校区検索

h3 学区を知りたい地点をクリックして「この地点の学区の小学校を検索する」ボタンを押すと、その地点が学区の小学校が黒丸で表示されます。

= form_tag primary_schools_path, method: :get
  = hidden_field_tag :lat, params[:lat]
  = hidden_field_tag :lng, params[:lng]
  div 
    | クリックした地点:
    span#address
  = button_tag 'この地点の学区の小学校を検索する'

- if @results

  - @results.each do |primary_school|
    article
      - properties = primary_school._source.properties
      h3
        | #{properties.a27_006}#{properties.a27_007}
        span.school-address data-school-address="#{properties.a27_008}" = " (所在地: #{properties.a27_008})"

  - if @results.count == 0
    p 該当地点のデータは登録されていません

#map

javascript:
  var markers = [];
  var initialized = false;
  var geocoder = new google.maps.Geocoder();

  function getAddress(latLng) {
    geocoder.geocode( {'latLng': latLng},
      function(results, status) {
        if(status == google.maps.GeocoderStatus.OK) {
          if(results[0]) {
            $('#address').html(results[0].formatted_address);
          }
          else {
            $('#address').html("No results");
          }
        }
        else {
          $('#address').html(status);
        }
      }
    );
  }

  function codeAddress(map) {
  
    var address = $('.school-address').first().attr('data-school-address');
  
    geocoder.geocode( { 'address' : address }, function( results, status ) {
      if( status == google.maps.GeocoderStatus.OK ) {

        var marker = new google.maps.Marker({
          position: results[0].geometry.location,
          icon: {
            path: google.maps.SymbolPath.CIRCLE,
            scale: 10
          },
          map: map
        });
        markers.push(marker);
      } else {
          alert( 'Geocodeは次の理由で失敗しました: ' + status );
      }
    } );
  }

  function addMarker(position, map) {
    $('#lat').val(position.lat());
    $('#lng').val(position.lng());
    var marker = new google.maps.Marker({
      position: position,
      map: map
    });
    markers.push(marker);
    getAddress(position);
    if(0 < $('.school-address').length && false == initialized) {
      codeAddress(map);
    }
  }

  var jsonData = {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "properties": {
          "stroke": "#555555",
          "stroke-width": 2,
          "stroke-opacity": 1
        },
        "geometry": #{raw @results.first._source.geometry.to_json}
      }
    ]
  };

  function processPoints(geometry, callback, thisArg) {
    if (geometry instanceof google.maps.LatLng) {
      callback.call(thisArg, geometry);
    } else if (geometry instanceof google.maps.Data.Point) {
      callback.call(thisArg, geometry.get());
    } else {
      geometry.getArray().forEach(function(g) {
        processPoints(g, callback, thisArg);
      });
    }
  }

  handler = Gmaps.build('Google');
  var window_width = $(window).width() * 0.95;
  $('#map').width(window_width);
  // 画面が横長か縦長かで高さを分岐
  if($(window).width() < $(window).height()) {
    $('#map').height(window_width * 0.8);
  } else {
    $('#map').height(window_width * 0.3);
  }

  handler.buildMap({ provider: {}, internal: {id: 'map'}}, function(){
    var map = handler.getMap();
    map.setCenter(#{raw @hash.first.to_json});
    map.setZoom(15);
    map.data.addGeoJson(jsonData);
    map.data.setStyle({strokeColor: "blue"});
    google.maps.event.addListener(map, 'bounds_changed', function(object){
      if(false == initialized) {
        addMarker(map.getCenter(), map);
        initialized = true;
      }
    });
    google.maps.event.addListener(map, 'click', function(object){
      for (var i = 0; i < markers.length; i++) {
        markers[i].setMap(null);
      }
      addMarker(object.latLng, map);
    });

    map.data.addListener('addfeature', function(e) {
      var bounds = new google.maps.LatLngBounds();
      processPoints(e.feature.getGeometry(), bounds.extend, bounds);
      map.fitBounds(bounds);
    });
  });

